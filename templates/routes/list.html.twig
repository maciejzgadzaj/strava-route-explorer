{% extends 'base.html.twig' %}

{% block title %}{{ 'Routes'|trans }} - {{ parent() }}{% endblock %}

{% block body %}
    <div class="routes">
        {% include 'pager.html.twig' %}

        {% set query = app.request.query.all %}
        <div class="head">
            <div class="image">
                <div class="label">Type</div>
            </div>
            <div class="name">
                <div class="label">
                    <span class="accesskey">R</span>oute
                </div>
                {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                {% if query.sort is defined and query.sort == 'name' %}
                    {% set icon = 'icon-sort-active.svg' %}
                    {% if query.dir is defined and query.dir == 'asc' %}
                        {% set dir, direction = 'desc', 'descending' %}
                    {% endif %}
                {% endif %}
                <div class="sort">
                    <a title="Sort routes by name in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'name', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                </div>
            </div>
            <div class="distance">
                <div class="label">
                    <span class="accesskey">D</span>istance
                </div>
                {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                {% if query.sort is defined and query.sort == 'distance' %}
                    {% set icon = 'icon-sort-active.svg' %}
                    {% if query.dir is defined and query.dir == 'asc' %}
                        {% set dir, direction = 'desc', 'descending' %}
                    {% endif %}
                {% endif %}
                <div class="sort">
                    <a title="Sort routes by distance in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'distance', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                </div>
            </div>
            <div class="elevation_gain">
                <div class="label">
                    <span class="accesskey">E</span>levation
                </div>
                {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                {% if query.sort is defined and query.sort == 'elevation' %}
                    {% set icon = 'icon-sort-active.svg' %}
                    {% if query.dir is defined and query.dir == 'asc' %}
                        {% set dir, direction = 'desc', 'descending' %}
                    {% endif %}
                {% endif %}
                <div class="sort">
                    <a title="Sort routes by elevation gain in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'elevation', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                </div>
            </div>
            <div class="athlete">
                <div class="label">
                    <span class="accesskey">A</span>thlete
                </div>
                {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                {% if query.sort is defined and query.sort == 'athlete' %}
                    {% set icon = 'icon-sort-active.svg' %}
                    {% if query.dir is defined and query.dir == 'asc' %}
                        {% set dir, direction = 'desc', 'descending' %}
                    {% endif %}
                {% endif %}
                <div class="sort">
                    <a title="Sort routes by athlete in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'athlete', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                </div>
            </div>
            <div class="updated">
                <div class="label">
                    Updated
                </div>
                {% set dir, direction, icon = 'desc', 'descending', 'icon-sort.svg' %}
                {% if query.sort is defined and query.sort == 'date' %}
                    {% set icon = 'icon-sort-active.svg' %}
                    {% if query.dir is defined and query.dir == 'desc' %}
                        {% set dir, direction = 'asc', 'ascending' %}
                    {% endif %}
                {% endif %}
                <div class="sort">
                    <a title="Sort routes by updated date in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'date', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                </div>
            </div>
        </div>

        {{ form_start(route_filter_form) }}
        <div class="filters basic_filters">
            <div class="filter image">
                {{ form_row(route_filter_form.type) }}
            </div>
            <div class="filter name">
                {{ form_row(route_filter_form.name) }}
            </div>
            <div class="filter distance">
                {{ form_widget(route_filter_form.distance_min) }}
                {{ form_widget(route_filter_form.distance_max) }}
            </div>
            <div class="filter elevation_gain">
                {{ form_widget(route_filter_form.elevation_gain_min) }}
                {{ form_widget(route_filter_form.elevation_gain_max) }}
            </div>
            <div class="filter athlete">
                {{ form_row(route_filter_form.athlete) }}
                {% set display = 'none' %}
                {% if (app.request.query.get('filter').athlete is defined and app.request.query.get('filter').athlete) %}
                    {% set display = 'block' %}
                {% endif %}
                <div class="starred" style="display:{{ display }}">
                    {{ form_widget(route_filter_form.starred) }} {{ form_label(route_filter_form.starred) }}
                </div>
            </div>
            <div class="filter updated{% if app.request.query.get('filter') %}{{ ' active' }}{% endif %}">
                {{ form_row(route_filter_form.type) }}
                {{ form_widget(route_filter_form.search) }}
                {{ form_widget(route_filter_form.reset) }}
            </div>
        </div>

        {% set advanced_filters_display = 'none' %}
        {% if app.request.query.get('filter') and (app.request.query.get('filter').start_latlon is defined and app.request.query.get('filter').start_latlon or app.request.query.get('filter').end_latlon is defined and app.request.query.get('filter').end_latlon) %}
            {% set advanced_filters_display = 'block' %}
        {% endif %}

        <div class="filters advanced_filters" style="display:{{ advanced_filters_display }}">
            <div class="filter location start">
                <div class="label">{{ form_label(route_filter_form.start) }}</div>
                <div class="address">{{ form_widget(route_filter_form.start) }}<img class="geolocate" data-target="start" src="images/icon-geolocate.svg" style="display:none" /></div>
                <div class="label">{{ form_label(route_filter_form.start_dist) }}</div>
                <div class="distance">{{ form_widget(route_filter_form.start_dist) }}</div>
                {{ form_widget(route_filter_form.start_latlon) }}
            </div>
            <div class="filter location end">
                <div class="label">{{ form_label(route_filter_form.end) }}</div>
                <div class="address">{{ form_widget(route_filter_form.end) }}<img class="geolocate" data-target="end" src="images/icon-geolocate.svg" style="display:none" /></div>
                <div class="label">{{ form_label(route_filter_form.end_dist) }}</div>
                <div class="distance">{{ form_widget(route_filter_form.end_dist) }}</div>
                {{ form_widget(route_filter_form.end_latlon) }}
            </div>
        </div>
        {{ form_end(route_filter_form) }}
        <div class="filters filter-links">
            <span class="advanced-filters-toggle">+ more filters</span>
        </div>

        <div class="rows">
            {% if data.results|length > 0 %}
                {% for row in data.results %}
                    <div class="row type-{{ row.route.type }} {{ cycle(['odd', 'even'], loop.index0) }}">
                        <div class="image">
                            <a href="https://www.strava.com/routes/{{ row.route.id }}"><img src="images/routes/{{ row.route.athlete.id }}/{{ row.route.id }}.jpg" width="75" height="50" /></a>
                        </div>
                        <div class="name">
                            {% set starred_by = null %}
                            {% if (row.starred_by_current_athlete is defined and row.starred_by_current_athlete) %}
                                {% set starred_by = 'current' %}
                            {% elseif (row.starred_by_searched_athlete is defined and row.starred_by_searched_athlete) %}
                                {% set starred_by = 'searched' %}
                            {% endif %}
                            {% if (starred_by) %}
                                <span class="starred starred_{{ starred_by }}">â˜…</span>
                            {% endif %}
                            <a title="See route on Strava.com" href="https://www.strava.com/routes/{{ row.route.id }}">{{ row.route.name }}</a>
                            <a title="See route on VeloViewer.com" class="veloviewer" href="https://veloviewer.com/routes/{{ row.route.id }}">vv</a>
                            <div class="description">{{ row.route.id }}</div>
                            <div class="description">{{ row.route.description }}</div>
                            {% if row.route.start_dist is defined or row.route.end_dist is defined %}
                                <div class="distances">
                                    {% if row.start_dist is defined %}
                                        <span class="start_dist">Start: <span class="distance">{{ row.start_dist|number_format(1, '.', ',') }} km</span></span>
                                    {% endif %}
                                    {% if row.end_dist is defined %}
                                        <span class="end_dist">End: <span class="distance">{{ row.end_dist|number_format(1, '.', ',') }} km</span></span>
                                    {% endif %}
                                </div>
                            {% endif %}
                        </div>
                        <div class="distance">
                            {{ (row.route.distance // 1000)|number_format }} <span class="unit">km</span>
                        </div>
                        <div class="elevation_gain">
                            {% if row.route.climbCategory in [5] %}
                                <div class="climb cat-{{ row.route.climbCategory }}"></div>
                            {% endif %}
                            {{ row.route.elevationGain|number_format }} <span class="unit">m</span>
                        </div>
                        <div class="athlete">
                            <a title="See all routes by {{ row.route.athlete.name }}" href="{{ path('routes', { 'filter[athlete]': row.route.athlete.name, 'filter[starred]': true }) }}">{{ row.route.athlete.name}}</a>
                            <div class="description"><a class="description" title="See athlete profile on Strava.com" href="https://www.strava.com/athletes/{{ row.route.athlete.id }}">{{ row.route.athlete.id }}</a></div>
                        </div>
                        <div class="updated">
                            {{ row.route.updatedAt|date('Y-m-d') }}
                            <div class="description" title="Created">{{ row.route.createdAt|date('Y-m-d') }}</div>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="row">
                    <div class="name">No routes found matching your criteria.</div>
                </div>
            {% endif %}
        </div>

        {% include 'pager.html.twig' %}
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('build/routes.css') }}">
    <link rel="stylesheet" href="{{ asset('build/pager.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function setTypeFilterClass() {
            var typeFilter = $("#filter_type");
            if (typeFilter.val() == 0) {
                typeFilter.removeClass("not_empty");
            } else {
                typeFilter.addClass("not_empty");
            }
        }

        $(document).ready(function () {
            setTypeFilterClass()
            $("#filter_type").on("change", function(){
                setTypeFilterClass()
            });
            $("#filter_athlete").keyup(function(){
                if ($(this).val()) {
                    $(".starred").show();
                } else {
                    $(".starred").hide();
                }
            });
            $(".advanced-filters-toggle").on("click", function(){
                $(".advanced_filters").slideToggle("fast", function(){
                    console.log($(this).is(":visible"));
                    if ($(this).is(":visible")) {
                        $(".advanced-filters-toggle").text('- less filters');
                    } else {
                        $(".advanced-filters-toggle").text('+ more filters');
                    }
                });
            });
            // https://jqueryui.com/autocomplete/
            // http://api.jqueryui.com/autocomplete/
            $('#filter_start, #filter_end').autocomplete({
                source: "{{ path('routes_autocomplete_location') }}",
                minLength: 3,
                delay: 200,
                search: function(event, ui){
                    var name = $(this).attr("id");
                    $("#"+name).parent().find('.geolocate').attr('src', "images/spinner.gif").addClass("clicked");
                },
                response: function(event, ui){
                    $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                },
                select: function(event, ui){
                    var name = $(this).attr("id");
                    $("#"+name+"_latlon").val(ui.item.latitude+","+ui.item.longitude);
                }
            }).data("ui-autocomplete")._renderItem = function( ul, item ) {
                var listItem = $("<li></li>").data("ui-autocomplete-item", item);

                // Add span around characters typed by user to make them strong.
                var re = new RegExp(this.term, 'i');
                var t = item.label.replace(re, '<span class="autocomplete-search-string">' + this.term + '</span>');
                listItem.html(t);

                return listItem.appendTo(ul);
            };

            // Geolocation for route "Start" and "End" filters.
            if (navigator.geolocation) {
                $('.geolocate').attr('style', '');
            }
            $('.geolocate').on("click", function(){
                $(this).attr('src', "images/spinner.gif").addClass("clicked");
                navigator.geolocation.getCurrentPosition(handlePosition);
            });
            function handlePosition(position, target) {
                navigator.geolocation.getCurrentPosition(handlePosition);
                $.ajax({
                    type: "GET",
                    url: "https://nominatim.openstreetmap.org/reverse?format=json&lat="+position.coords.latitude+"&lon="+position.coords.longitude,
                    timeout: 5000,
                    success: function(data){
                        var target = $("img.geolocate.clicked").attr("data-target");
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                        $("#filter_"+target).val(data.display_name);
                        $("#filter_"+target+"_latlon").val(data.lat+","+data.lon);
                    },
                    error: function(data){
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                    }
                });
            }
        });
    </script>
{% endblock %}
