{% extends 'base.html.twig' %}

{% block title %}{{ 'Routes'|trans }} - {{ parent() }}{% endblock %}

{% block body %}
    <div class="page page_routes">
        {% if data.results|length > 0 %}
            <div class="section_pager_top">
                {% include 'pager.html.twig' %}
            </div>
        {% endif %}

        {# SECTION: FILTERS #}
        {{ form_start(route_filter_form) }}
        {% set query = app.request.query.all %}
        <div class="filters_toggle">
            <div class="label">filter results</div>
            {% if filter_values %}
                <div class="filter_values">
                    {% for key, value in filter_values %}
                        <div class="filter_value">{{ key }}: {{ value }}</div>
                    {% endfor %}
                </div>
            {% endif %}
        </div>
        <div class="section_filters">

            {# FILTER: TYPE #}
            <div class="filter type">
                <div class="label">
                    <div class="text">Type</div>
                </div>
                <div class="input">
                    {{ form_row(route_filter_form.type) }}
                </div>
            </div>
            {# END FILTER: NAME #}

            {# FILTER: NAME #}
            <div class="filter name">
                <div class="label">
                    <div class="text">Route</div>
                    {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                    {% if query.sort is defined and query.sort == 'name' %}
                        {% set icon = 'icon-sort-active.svg' %}
                        {% if query.dir is defined and query.dir == 'asc' %}
                            {% set dir, direction = 'desc', 'descending' %}
                        {% endif %}
                    {% endif %}
                    <div class="sort">
                        <a title="Sort routes by name in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'name', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                    </div>
                </div>
                <div class="input">
                    {{ form_row(route_filter_form.name) }}
                    <a class="help" title="How to search" href="https://github.com/maciejzgadzaj/strava-route-explorer/wiki/Searching#route"></a>
                </div>
            </div>
            {# END FILTER: NAME #}

            {# FILTER: DISTANCE #}
            <div class="filter distance">
                <div class="label">
                    <div class="text">Distance</div>
                    {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                    {% if query.sort is defined and query.sort == 'distance' %}
                        {% set icon = 'icon-sort-active.svg' %}
                        {% if query.dir is defined and query.dir == 'asc' %}
                            {% set dir, direction = 'desc', 'descending' %}
                        {% endif %}
                    {% endif %}
                    <div class="sort">
                        <a title="Sort routes by distance in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'distance', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                    </div>
                </div>
                <div class="input">
                    {{ form_widget(route_filter_form.distance_min) }}
                    {{ form_widget(route_filter_form.distance_max) }}
                </div>
            </div>
            {# END FILTER: DISTANCE #}

            {# FILTER: ASCENT #}
            <div class="filter ascent">
                <div class="label">
                    <div class="text">Ascent</div>
                    {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                    {% if query.sort is defined and query.sort == 'ascent' %}
                        {% set icon = 'icon-sort-active.svg' %}
                        {% if query.dir is defined and query.dir == 'asc' %}
                            {% set dir, direction = 'desc', 'descending' %}
                        {% endif %}
                    {% endif %}
                    <div class="sort">
                        <a title="Sort routes by ascent in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'ascent', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                    </div>
                </div>
                <div class="input">
                    {{ form_widget(route_filter_form.ascent_min) }}
                    {{ form_widget(route_filter_form.ascent_max) }}
                </div>
            </div>
            {# END FILTER: ASCENT #}

            {# FILTER: ATHLETE #}
            <div class="filter athlete">
                <div class="label">
                    <div class="text">Athlete</div>
                    {% set dir, direction, icon = 'asc', 'ascending', 'icon-sort.svg' %}
                    {% if query.sort is defined and query.sort == 'athlete' %}
                        {% set icon = 'icon-sort-active.svg' %}
                        {% if query.dir is defined and query.dir == 'asc' %}
                            {% set dir, direction = 'desc', 'descending' %}
                        {% endif %}
                    {% endif %}
                    <div class="sort">
                        <a title="Sort routes by athlete in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'athlete', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                    </div>
                </div>
                <div class="input">
                    {{ form_row(route_filter_form.athlete) }}
                    {% set display = 'none' %}
                    {% if (app.request.query.get('filter').athlete is defined and app.request.query.get('filter').athlete) %}
                        {% set display = 'block' %}
                    {% endif %}
                    <div class="starred" style="display:{{ display }}">
                        {{ form_widget(route_filter_form.starred) }} {{ form_label(route_filter_form.starred) }}
                    </div>
                </div>
            </div>
            {# END FILTER: ATHLETE #}

            {# ADVANCED FILTERS WRAPPER #}
            <div class="advanced_filters_wrapper">
                {% set advanced_filters_display = 'none' %}
                {% if app.request.query.get('filter') and (
                    app.request.query.get('filter').start_latlon is defined and app.request.query.get('filter').start_latlon
                    or app.request.query.get('filter').end_latlon is defined and app.request.query.get('filter').end_latlon
                    or app.request.query.get('filter').tags is defined and app.request.query.get('filter').tags
                    or app.request.query.get('filter').segments is defined and app.request.query.get('filter').segments
                ) %}
                    {% set advanced_filters_display = 'block' %}
                {% endif %}
                {# ADVANCED FILTERS #}
                <div class="advanced_filters" style="display:{{ advanced_filters_display }}">

                    {# ADVANCED FILTER: TAGS #}
                    <div class="filter tags">
                        <div class="label">
                            <div class="text">{{ form_label(route_filter_form.tags) }}</div>
                        </div>
                        <div class="input">
                            {{ form_widget(route_filter_form.tags) }}
                            <a class="help" title="How to search" href="https://github.com/maciejzgadzaj/strava-route-explorer/wiki/Searching#tags"></a>
                        </div>
                    </div>
                    {# END ADVANCED FILTER: TAGS #}

                    {# ADVANCED FILTER: SEGMENTS #}
                    <div class="filter segments">
                        <div class="label">
                            <div class="text">{{ form_label(route_filter_form.segments) }}</div>
                        </div>
                        <div class="input">
                            {{ form_widget(route_filter_form.segments) }}
                            <a class="help" title="How to search" href="https://github.com/maciejzgadzaj/strava-route-explorer/wiki/Searching#segments"></a>
                        </div>
                    </div>
                    {# END ADVANCED FILTER: SEGMENTS #}

                    {# ADVANCED FILTER: START LOCATION #}
                    <div class="filter location location_start">
                        <div class="location_section location_address">
                            <div class="label">
                                <div class="text">{{ form_label(route_filter_form.start) }}</div>
                            </div>
                            <div class="input address">
                                {{ form_widget(route_filter_form.start) }}
                                <img class="geolocate" data-target="start" src="images/icon-geolocate.svg" style="display:none" />
                            </div>
                        </div>
                        <div class="location_section location_within">
                            <div class="label">
                                <div class="text">{{ form_label(route_filter_form.start_dist) }}</div>
                            </div>
                            <div class="input distance">
                                {{ form_widget(route_filter_form.start_dist) }}
                            </div>
                        </div>
                        {{ form_widget(route_filter_form.start_latlon) }}
                    </div>
                    {# END ADVANCED FILTER: START LOCATION #}

                    {# ADVANCED FILTER: END LOCATION #}
                    <div class="filter location location_end">
                        <div class="location_section location_address">
                            <div class="label">
                                <div class="text">{{ form_label(route_filter_form.end) }}</div>
                            </div>
                            <div class="input address">
                                {{ form_widget(route_filter_form.end) }}
                                <img class="geolocate" data-target="end" src="images/icon-geolocate.svg" style="display:none" />
                            </div>
                        </div>
                        <div class="location_section location_within">
                            <div class="label">
                                <div class="text">{{ form_label(route_filter_form.end_dist) }}</div>
                            </div>
                            <div class="input distance">
                                {{ form_widget(route_filter_form.end_dist) }}
                            </div>
                        </div>
                        {{ form_widget(route_filter_form.end_latlon) }}
                    </div>
                    {# END ADVANCED FILTER: END LOCATION #}

                </div>
                {# END ADVANCED FILTERS #}
                <div class="filters advanced-filters-links">
                    <span class="advanced-filters-toggle">+ advanced search</span>
                </div>
            </div>
            {# END ADVANCED FILTERS WRAPPER #}

            {# FILTER: UPDATED #}
            <div class="filter updated{% if app.request.query.get('filter') %} active{% endif %}">
                <div class="label">
                    <div class="text">Updated</div>
                    {% set dir, direction, icon = 'desc', 'descending', 'icon-sort.svg' %}
                    {% if query.sort is not defined and app.request.query.get('filter').name is not defined and app.request.query.get('filter').tags is not defined and app.request.query.get('filter').segments is not defined or query.sort is defined and query.sort == 'date' %}
                        {% set icon = 'icon-sort-active.svg' %}
                        {% if query.dir is not defined or query.dir is defined and query.dir == 'desc' %}
                            {% set dir, direction = 'asc', 'ascending' %}
                        {% endif %}
                    {% endif %}
                    <div class="sort">
                        <a title="Sort routes by updated date in {{ direction }} order" href="{{ path(app.request.attributes.get('_route'), app.request.query.all|merge({ 'sort': 'date', 'dir': dir })) }}"><img src="images/{{ icon }}" width="12" height="12" /></a>
                    </div>
                </div>
                <div class="input">
                    {{ form_widget(route_filter_form.search) }}
                    {{ form_widget(route_filter_form.reset) }}
                </div>
            </div>
            {# END FILTER: UPDATED #}

        </div>
        {{ form_end(route_filter_form) }}
        {# END SECTION: FILTERS #}

        {# SECTION: ROWS #}
        <div class="section_rows">
            {% if data.results|length > 0 %}
                {% for row in data.results %}
                    <div class="row type-{{ row.route.type }} {{ cycle(['odd', 'even'], loop.index0) }}">
                        <div class="cell image">
                            <a href="https://www.strava.com/routes/{{ row.route.id }}"><img src="images/routes/{{ row.route.athlete.id }}/{{ row.route.id }}.jpg" width="75" height="50" /></a>
                        </div>
                        <div class="cell name">
                            {% set starred_by = null %}
                            {% if (row.starred_by_current_athlete is defined and row.starred_by_current_athlete) %}
                                {% set starred_by = 'current' %}
                            {% elseif (row.starred_by_searched_athlete is defined and row.starred_by_searched_athlete) %}
                                {% set starred_by = 'searched' %}
                            {% endif %}
                            {% if (starred_by) %}
                                <span class="icon starred starred_{{ starred_by }}">★</span>
                            {% endif %}
                            {% if not row.route.public %}
                                <span class="icon private" title="This route is not published and visible only to you"></span>
                            {% endif %}
                            <a title="See route on Strava.com" href="https://www.strava.com/routes/{{ row.route.id }}">{{ row.route.name }}</a>
                            <a title="See route on VeloViewer.com" class="link external veloviewer" href="https://veloviewer.com/routes/{{ row.route.id }}">VV</a>
                            <a title="Download route in .TCX format" class="link external download-tcx" href="https://www.strava.com/routes/{{ row.route.id }}/export_tcx">TCX</a>
                            <div class="route_id small">{{ row.route.id }}</div>
                            <div class="description small">{{ row.route.description }}</div>
                            {% if row.route.start_dist is defined or row.route.end_dist is defined %}
                                <div class="distances">
                                    {% if row.start_dist is defined %}
                                        <span class="start_dist">Start: <span class="distance">{{ row.start_dist|number_format(1, '.', ',') }} km</span></span>
                                    {% endif %}
                                    {% if row.end_dist is defined %}
                                        <span class="end_dist">End: <span class="distance">{{ row.end_dist|number_format(1, '.', ',') }} km</span></span>
                                    {% endif %}
                                </div>
                            {% endif %}
                        </div>
                        <div class="cell distance">
                            {{ (row.route.distance // 1000)|number_format }} <span class="unit">km</span>
                        </div>
                        <div class="cell ascent">
                            {% if row.route.climbCategory in [5] %}
                                <div class="climb cat-{{ row.route.climbCategory }}"></div>
                            {% endif %}
                            {{ row.route.ascent | number_format }} <span class="unit">m</span>
                        </div>
                        <div class="flex-line-break"></div>
                        <div class="cell athlete">
                            <a title="See all routes by {{ row.route.athlete.name }}" href="{{ path('routes', { 'filter[athlete]': row.route.athlete.name, 'filter[starred]': true }) }}">{{ row.route.athlete.name}}</a>
                            <div class="athlete_id small"><a class="small" title="See athlete profile on Strava.com" href="https://www.strava.com/athletes/{{ row.route.athlete.id }}">{{ row.route.athlete.id }}</a></div>
                        </div>
                        <div class="cell updated">
                            {{ row.route.updatedAt|date('Y-m-d') }}
                            <div class="created small" title="Created">{{ row.route.createdAt|date('Y-m-d') }}</div>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <div class="row">
                    <div class="empty">No routes found matching your criteria.</div>
                </div>
            {% endif %}
        </div>
        {# END SECTION: ROWS #}

        {% if data.results|length > 0 %}
            <div class="section_pager_bottom">
                {% include 'pager.html.twig' %}
            </div>
        {% endif %}

    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('build/routes.css') }}">
    <link rel="stylesheet" media='screen and (max-width: 760px)' href="{{ asset('build/routes-mobile.css') }}" />
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function setSelectClass(element) {
            if (element.val() == 0) {
                element.removeClass("not_empty");
            } else {
                element.addClass("not_empty");
            }
        }

        function setAdvancedFiltersToggleLabel(element) {
            if (element.is(":visible")) {
                $(".advanced-filters-toggle").text('- basic search');
            } else {
                $(".advanced-filters-toggle").text('+ advanced search');
            }
        }

        $(document).ready(function(){
            $("#filter_type, #filter_start_dist, #filter_end_dist").each(function(){
                setSelectClass($(this));
            }).on("change", function(){
                setSelectClass($(this));
            });

            setAdvancedFiltersToggleLabel($(".advanced_filters"));

            $(".filters_toggle").on("click", function(){
                $(".section_filters").slideToggle("fast", function(){
                    if ($(this).is(":visible")) {
                        $(".filters_toggle .filter_values").hide();
                        $(".filters_toggle .label").text('hide filters');
                        $(".filters_toggle").addClass("open");
                    } else {
                        $(".filters_toggle .label").text('filter results');
                        $(".filters_toggle .filter_values").show();
                        $(".filters_toggle").removeClass("open");
                    }
                });
            });
            $("#filter_athlete").keyup(function(){
                if ($(this).val()) {
                    $(".starred").show();
                } else {
                    $(".starred").hide();
                }
            });
            $(".advanced-filters-toggle").on("click", function(){
                $(".advanced_filters").slideToggle("fast", function(){
                    setAdvancedFiltersToggleLabel($(this));
                });
            });
            // http://api.jqueryui.com/autocomplete/
            // https://jqueryui.com/autocomplete/#custom-data
            $('#filter_start')
                .autocomplete({
                    source: "{{ path('routes_autocomplete_location') }}",
                    minLength: 3,
                    delay: 250,
                    appendTo: $(this).attr("id"),
                    change: function( event, ui ) {
                        var name = $(this).attr("id");
                        if ( ui.item === null ) {
                            $("#"+name+"_latlon").val(null);
                        }
                    },
                    search: function( event, ui ) {
                        var name = $(this).attr("id");
                        $("#"+name).parent().find('.geolocate').attr('src', "images/spinner.gif").addClass("clicked");
                    },
                    response: function( event, ui ) {
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                    },
                    select: function( event, ui ) {
                        var name = $(this).attr("id");
                        $("#"+name).val(ui.item.name+", "+ui.item.city+", "+ui.item.country);
                        $("#"+name+"_latlon").val(ui.item.latitude+","+ui.item.longitude);
                        return false;
                    }
                })
                .autocomplete( "instance" )._renderItem = function( ul, item ) {
                    return $("<li>")
                        .append( "<div class=\"name\">" + item.name + "</div>" )
                        .append( "<div class=\"details\"><span class=\"class\">" + item.class + "</span>, <span class=\"address\">" + item.city + ", "+ item.country + "</span></div>" )
                        .appendTo( ul );
                };
            $('#filter_end')
                .autocomplete({
                    source: "{{ path('routes_autocomplete_location') }}",
                    minLength: 3,
                    delay: 250,
                    appendTo: $(this).attr("id"),
                    change: function( event, ui ) {
                        var name = $(this).attr("id");
                        if ( ui.item === null ) {
                            $("#"+name+"_latlon").val(null);
                        }
                    },
                    search: function( event, ui ) {
                        var name = $(this).attr("id");
                        $("#"+name).parent().find('.geolocate').attr('src', "images/spinner.gif").addClass("clicked");
                    },
                    response: function( event, ui ) {
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                    },
                    select: function( event, ui ) {
                        var name = $(this).attr("id");
                        $("#"+name).val(ui.item.name+", "+ui.item.city+", "+ui.item.country);
                        $("#"+name+"_latlon").val(ui.item.latitude+","+ui.item.longitude);
                        return false;
                    }
                })
                .autocomplete( "instance" )._renderItem = function( ul, item ) {
                    return $("<li>")
                        .append( "<div class=\"name\">" + item.name + "</div>" )
                        .append( "<div class=\"details\"><span class=\"class\">" + item.class + "</span>, <span class=\"address\">" + item.city + ", "+ item.country + "</span></div>" )
                        .appendTo( ul );
                };

            // Geolocation for route "Start" and "End" filters.
            if (navigator.geolocation) {
                $('.geolocate').attr('style', '');
            }
            $('.geolocate').on("click", function(){
                $(this).attr('src', "images/spinner.gif").addClass("clicked");
                var options = {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                };
                navigator.geolocation.getCurrentPosition(handlePosition, geolocationError, options);
            });
            function handlePosition(position, target) {
                $.ajax({
                    type: "GET",
                    url: "/routes/autocomplate/reverse?lat=" + position.coords.latitude + "&lon=" + position.coords.longitude,
                    timeout: 5000,
                    success: function(data){
                        var target = $("img.geolocate.clicked").attr("data-target");
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                        $("#filter_"+target).val(data.name + ", " + data.city + ", " + data.country);
                        $("#filter_"+target+"_latlon").val(data.latitude + "," + data.longitude);
                    },
                    error: function(data){
                        $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                    }
                });
            }
            function geolocationError(err) {
                $("img.geolocate.clicked").attr("src", "images/icon-geolocate.svg").removeClass("clicked");
                console.warn(err);
            }

        });
    </script>
{% endblock %}
